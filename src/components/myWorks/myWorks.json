[
  { "name": "Интерфейс для сайта Hacker News (https://news.ycombinator.com/news)",
    "text": "<p>Проект состоит из двух страниц:</p><ul><li>Главная: показывает 100 последних новостей, автоматически обновляется раз в минуту (есть отключение обновления).</li><li>Страница новости с деревом комментариев. Дочерние комментарии подгружаются при клике по родительскому. Также есть автообновление.</li></ul><p>SPA написано с использованием фреймворка Remix.run (server side rendering) и развернуто в docker. Анимации с gsap.</p>",
    "platform": "Web / SSR", 
    "tech": [
      "Docker", "JavaScript", "TypeScript", "React", "mobX", "remix-run", "gsap", "react-svg", "react-transition-group", "sass"
    ],
    "link": "https://hn.evgeny.lol",
    "git_link": "feverus/hacker-news",
    "screenshots": ["img/hacker_news.jpg"]
  },
  { "name": "Демонстрация работы с api яндекс карт",
    "text": "<p>Проект состоит из двух страниц:</p><ul><li>поиск ближайшего города из БД по введенным координатам или адресу</li><li>отображение списка объектов из БД на карте с фильтрацией.</li></ul><p>SPA развернуто в docker.</p>",
    "platform": "Web", 
    "tech": [
      "Docker", "JavaScript", "TypeScript", "React", "mobX", "rsuite", "@pbe/react-yandex-maps", "react-svg", "react-router", "react-modal"
    ],
    "link": "/maps/",
    "git_link": "feverus/maps_test",
    "screenshots": ["img/maps_test.jpg"]
  },
  { "name": "Упрощенная копия приложения \"Заметки\" из операционной системы Apple macOS",
    "text": "<p>Реализованы функции:</p><ul><li>создание заметок</li><li>удаление (с подтверждением)</li><li>редактирование (заметки сохраняются \"на лету\")</li><li>поиск (одновременно по заголовку и содержимому)</li></ul><p>В качестве стейт менеджера использован mobX.</p><p>Хранение данных: в IndexedDb с помощью dexie.</p>",
    "platform": "Web", 
    "tech": [
      "JavaScript", "TypeScript", "React", "mobX", "dexie", "antd", "react-simplemde-editor", "IndexedDb"
    ],
    "link": "/mac-like-notes/",
    "git_link": "feverus/mac-like-notes",
    "screenshots": ["img/mac-like-notes.jpg"]
  },
  { "name": "PWA \"Кости и таймер для настольных игр\"",
    "text": "<p>Задача:</p><p>Разработать Прогрессивное web-приложение.Я сосредоточился на изучении технологии, при этом хотелось сделать не \"пустышку\", а что-то,что имеет хотя бы минимальную практическую ценность.</p><ul><li>страница открывается из кэша при отсутствующем соединении</li><li>на телефоне можно уcтановить, как приложение (в chrome) или просто сохранить страницу другим браузером</li></ul><p>Также в проекте использовался фреймворк antd.</p><p>Задача:</p><p>Разработать Прогрессивное web-приложение.Я сосредоточился на изучении технологии, при этом хотелось сделать не \"пустышку\", а что-то,что имеет хотя бы минимальную практическую ценность.</p><ul><li>страница открывается из кэша при отсутствующем соединении</li><li>на телефоне можно уcтановить, как приложение (в chrome) или просто сохранить страницу другим браузером</li></ul><p>Также в проекте использовался фреймворк antd.</p>",
    "platform": "Web / PWA", 
    "tech": [
      "JavaScript", "TypeScript", "React", "react-redux", "react-transition-group", "service worker", "antd", "jquery"
    ],
    "link": "/pwa_for_gamers/",
    "git_link": "feverus/pwa_for_gamers",
    "screenshots": ["img/pwa_for_gamers.jpg"]
  },
  { "name": "Игра \"Лабиринт\"",
    "text": "<p>Задача:</p><p>Разработать игру «Лабиринт» на ReactJS + Redux.</p><p>Есть поле размером 3 на 3 ячейки(продумайте масштабируемость). В начале игры в случайную ячейку помещаем маркер. Далее генерируются 10 «ходов» (возможные варианты «вверх», «влево», «вниз», «вправо»). Игрок должен в уме «пройти» по этим ходам по лабиринту и указать конечную точку маркера.</p><p>После ответа (клик на ячейку) идет проверка ответа и предоставляется возможность начать новую игру (например, по клику на кнопку «Далее»</p><p></p><p>Дополнительно реализованы:</p><ul><li>выбор уровня сложности (масштабируемость игрового поля и количества ходов)</li><li>ведение статистики правильных ответов в раундах</li><li>анимация движения по лабиринту после установки маркера</li></ul>",
    "platform": "Web", 
    "tech": [
      "JavaScript", "TypeScript", "React", "react-redux"
    ],
    "link": "/amakids_test/",
    "git_link": "feverus/amakids_test",
    "screenshots": ["img/amakids_test.jpg"]
  },
  { "name": "Лендинг с Server-Side Rendering",
    "text": "<p>Задача:</p><p><ul><li>Макет экранов в Figma</li><li>Данные в json файле</li><li>Требования формировать страницу полностью на стороне сервера</li></ul></p><p>Для SSR выбрал популярный фреймворк next.js с хорошей документацией и удобством работы. Простое с точки зрения react разработчика задание несколько осложнилось необходимостью ставить Node.js на сервер. У next.js есть вариант Static HTML Export, создающий статичные страницы и требующий новой сборки при каждом обновлении информации.</p>",
    "platform": "Web / SSR", 
    "tech": [
      "JavaScript", "TypeScript", "Next.js", "Node.js", "React", "json", "react-slick", "react-waypoint", "slick-carousel"
    ],
    "link": "/elki/",
    "git_link": "feverus/elki",
    "screenshots": ["img/elki.jpg"]
  },
  { "name": "Приложение личный кабинет",
    "text": "<p><a target=\"_blank\" href=\"https://docs.google.com/document/d/e/2PACX-1vQYeZ1MEh08bOdBKSPAWDAMVWk0EUWbrUY-XyMdFKtcCIerQTpsSZf67trPfMIbEkXWB93ifAGbXY-V/pub\">Задание (ссылка на google docs)</a></b></p><p>В задании Можно было использовать UI фреймворк и я взял <a target=\"_blank\" href=\"https://mui.com\">MUI</a>. Много возможностей и еще больше необходимости настраивать стили вручную.</p><p>Для имитации работы бэкенда развернул typicode/json-server. Надеюсь, glitch.com еще работает.</p><p>Возможности создания нового пользователя нет, т.к. этого не было в ТЗ. Для входа можно использовать пару логин/пароль: <b>son / 123</b></p>",
    "platform": "Web", 
    "tech": [
      "JavaScript", "TypeScript", "React", "json", "mui", "react-redux", "react-router-dom", "react-number-format", "json-server"
    ],
    "link": "/takeoff/",
    "git_link": "feverus/takeoff-testwork",
    "screenshots": ["img/takeoff.png"]
  },
  { "name": "Frontend. React+Redux с анимациями",
    "text": "<p><a target=\"_blank\" href=\"https://docs.google.com/document/d/e/2PACX-1vQ257S1A5NTZYeaR5Cb2YRoqcmSElb0QcWWUUy3txlPgyMXeU_1zNm4apOwYuXeM4HlUdKa0G5TEkyF/pub\">Задание (ссылка на google docs)</a></p><p><ul><li><b>Анимация списка. При загрузке, пересортировке, фильтрации и смене вида, элементы списка появляются друг за другом (с небольшой задержкой относительно друг друга).</b><br>Визуально мне не хватает анимации исчезновения элементов списка при фильтрации.</li><li><b>Autoplay. Видеоролики в превью автоматически запускаются, когда видео находится в районе середины экрана и становится на паузу, когда выходят из этой зоны. Не может играть два видео одновременно. После «ручного» запуска какого-либо видео функция автоплея отключается.</b><br>Перебрал несколько react библиотек в поисках функции из коробки отличать постановку видео на паузу скриптом и пользователем. В итоге просто разместил прозрачную кнопку паузы поверх видео, пропадающую при клике по ней.</li><li><b>Брендированность. Элементы интерфейса (кнопки, favourite и тд) имеют цвет из переменной (например, какой-нибудь $brandColor в стилях). </b><br>По-моему, спорное решение. Я за тщательный подбор цветов для каждой цветовой схемы. Прописаны переменные в .less файл.</li></ul></p>",
    "platform": "Web", 
    "tech": [
      "JavaScript", "less", "React", "json", "react-player", "react-redux", "react-router-dom", "react-svg", "react-transition-group", "react-visibility-sensor"
    ],
    "link": "/soc/",
    "git_link": "feverus/Test-for-Studiia-Olega-Chulakova",
    "screenshots": ["img/soc.jpg"]
  },
  { "name": "Счетчик жизней/очков для настольных игр",
    "text": "<p>Моё первое SPA на React. Традиционно калькулятор. Идея пришла во время игры в&nbsp;Манчкин с&nbsp;отсутствующими карточками отслеживания уровня игроков.</p><p>Кроме основной задачи, заменять карточки игроков в&nbsp;настольных играх, реализованы дополнительные функции:</p><p><ul><li>Одиночный бросок \"костей\" и&nbsp;бросок для всех игроков одновременно. Настраивается количество и&nbsp;размерность костей.</li><li>Таймер для игр с&nbsp;ограничением продолжительности хода</li><li>Сохранение сеансов с&nbsp;использованием cookies.</li><li>Возможность поделиться сеансом с&nbsp;другими игроками в&nbsp;режиме просмотра.</li><li>Возможность поделиться правами редактирования.</li><li>Настройка параметров игры: количество очков жизней, условия победы, активные состояния в&nbsp;процессе раунда</li><li>Выбор \"пресетов\" - настроек для конкретных игр</li></ul></p><p>Немного бэкенда на php (хранение json данных на сервере).</p>",
    "platform": "Web", 
    "tech": [
      "JavaScript", "PHP", "React", "jquery", "json", "muicss", "react-color"
    ],
    "link": "/hp/",
    "git_link": "feverus/hp",
    "screenshots": ["img/hp.png"]
  },
  { "name": "Статистика теннисистов с tennisexplorer.com",
    "text": "<p>Парсинг статистики по всем игрокам с&nbsp;сайта tennisexplorer.com и&nbsp;их последующий просмотр с&nbsp;помощью React. По ТЗ заказчика считаются коэффициенты по предоставленной формуле. Есть функций сравнения статистики двух игроков.</p><p>Статистика обновляется автоматически при первом посещении страницы. Т.к. парсинг занимает некоторое время, до обновления доступна статистика с&nbsp;предыдущего обновления.</p>",
    "platform": "Web", 
    "tech": [
      "JavaScript", "PHP", "animate.css", "json", "react-autocomplete", "react-visibility-sensor"
    ],
    "link": "/tennis/",
    "git_link": "feverus/tennis",
    "screenshots": ["img/tennis.png"]
  }
]